What is hibernate framework? Why is it said to be an ORM framework?

1) Map objects to tables
2) Use persistence api for crud operations : save, update, delete, get, load
3) We don't have to load the driver, write sql queries, manage the resultset, do the data transformation. Just focus on business logic when compared to jdbc
4) Hibernate provides a powerful query language (HQL) that is similar to SQL. However, HQL is fully object-oriented and understands concepts like inheritance, polymorphism and association
5) Hibernate is an open source project from Red Hat Community and used worldwide. This makes it a better choice than others because learning curve is small and there are tons of online documentations and help is easily available in forums.
6) Hibernate is easy to integrate with other Java EE frameworks, it’s so popular that Spring Framework provides built-in support for integrating hibernate with Spring applications
7)Hibernate supports lazy initialization using proxy objects and perform actual database queries only when it’s required.
8) Hibernate cache helps us in getting better performance.
9) For database vendor specific feature, hibernate is suitable because we can also execute native sql queries.
10) Hibernate implicitly provides transaction management, in fact most of the queries can’t be executed outside transaction.
11) 

Transaction Management:

If only 1 database: configure datasource , enable it to participate in global transaction, give jndi name, get Connection. If only 1 datasource, connection.setAutoCommit(false); connection.commit(); connection.rollback();

If more than 1 database:
Driver should support global transaction. Enable global transaction, transaction manager in server. Create Resource manager for managing datasource, 1 per db. JTS: Java transaction service. Implementing JTS is creating resource manager.
JTA: java transaction api: 
1 Transaction manager exist for managing all resources. Various applications servers. UserTransaction interface implementation written by each application server knows how to interact with Transaction Manager. Object of UserTransaction created using jndi: java:/userTransaction.

UserTransaction.begin(), commit(), rollback()

Transaction Manager will rollback if any of the resource manager notifies that any statement execution fails.



Session.getConnection().setAutoCommit(false): not recommended

Session.beginTransaction(): recommended.

Getting the java.sql.Connection object using Session:

org.hibernate.Session is nothing but get the one physical connection from the database. 

By using Session we can get the Connection object several ways.

1) session.connection() - this method is deprecated. it is not available on Hibernate4.

2) session.doWork() - this method doesn't return Connection object, but inside what ever operation we want to do using connection object we can do. 

3) session.doReturningWork() - this method returns dynamic type value. In the below example i am return Connection object. 

4) SessionImpl.connection() - Down casting the Session object to SessionImpl. By using SessionImpl we will get the Connection object.

5) ConnectionProvider.getConnection() - Using ConnectionProvider getConnection() method.


Full Example:

package com.varasofttech.client;

import java.sql.Connection;
import java.sql.SQLException;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.engine.jdbc.connections.spi.ConnectionProvider;
import org.hibernate.engine.spi.SessionFactoryImplementor;
import org.hibernate.internal.SessionImpl;
import org.hibernate.jdbc.ReturningWork;
import org.hibernate.jdbc.Work;

import com.varasofttech.util.HibernateUtil;

public class Application {
    
    public static void main(String[] args) {
        
        // Different ways to get the Connection object using Session
        
        SessionFactory sessionFactory = HibernateUtil.getSessionFactory();
        Session session = sessionFactory.openSession();
        
        // Way1 - using doWork method
        session.doWork(new Work() {
            @Override
            public void execute(Connection connection) throws SQLException {
                // do your work using connection
            }
            
        });
        
        // Way2 - using doReturningWork method
        Connection connection = session.doReturningWork(new ReturningWork<Connection>() {
            @Override
            public Connection execute(Connection conn) throws SQLException {
                return conn;
            }
        });
        
        // Way3 - using Session Impl
        SessionImpl sessionImpl = (SessionImpl) session;
        connection = sessionImpl.connection();
        // do your work using connection
        
        // Way4 - using connection provider
        SessionFactoryImplementor sessionFactoryImplementation = (SessionFactoryImplementor) session.getSessionFactory();
        ConnectionProvider connectionProvider = sessionFactoryImplementation.getConnectionProvider();
        try {
            connection = connectionProvider.getConnection();
            // do your work using connection
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}
 

When using hibernate in application server, instead of using hibernate transaction, use UserTransaction interface

Session.beginTransaction(): will see if there is a transaction going on , if yes, will use same




sessionFactory.getCurrentSession(): Error, not using JTA and neither configured CurrentSessionContext




No need of session.close() here





If doing session.getCurrentSession(), need not flush. Tx.commit will do. But if openSession(), we need to flush that and close that.


Before transaction is committed, flush the session.










Even if flushed and not done commit, changes not saved in db though queries executed, not committed in db. If neither commit nor flushed, queries not executed in db.



